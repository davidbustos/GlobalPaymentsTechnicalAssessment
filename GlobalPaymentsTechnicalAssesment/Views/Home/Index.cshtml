<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
           /*  display: flex;
            flex-direction: row; */
        }

        #elevatorSketch {
            width: 200px;
            height: 400px;
        }
    </style>

    <title>Elevator Simulator</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/processing.js/1.6.6/processing.min.js"></script>
    <script>
        let isInside = false; // Tracks whether the user is inside the elevator
        let previousState = ""; // Tracks the previous state to detect state changes

        async function pollElevatorState() {
            const response = await fetch('/api/elevatorapi/state');
            const data = await response.json();

            document.getElementById('currentFloor').innerText = `Current Floor: ${data.currentFloor}`;
            document.getElementById('state').innerText = `State: ${data.state}`;
            document.getElementById('doorState').innerText = `Door State: ${data.doorState}`;
            document.getElementById('position').innerText = `Position: ${data.position.toFixed(2)} meters`;

            // Handle state changes
            if (data.state === "Idle" && data.doorState === "Closed") {
                // If the trip is completed, reset to external controls
                if (isInside) {
                    isInside = false; // Exit the elevator
                    document.getElementById('fromFloor').value = data.currentFloor; // Update dropdown to current floor
                    updateControls(); // Switch to external controls
                }
            }

            // Transition to internal controls when the doors are opened
            if (data.doorState === "Opened" && !isInside) {
                isInside = true;
                updateControls(); // Switch to internal controls
            }

            previousState = data.state; // Update the previous state

                 // Update Processing sketch
        const sketch = Processing.getInstanceById('elevatorSketch');
        if (sketch) {
            sketch.updateElevator(data.currentFloor, data.state, data.doorState); // Map floor to position
        }
        }

        async function handleExternalRequest(direction) {
            const fromFloor = parseInt(document.getElementById('fromFloor').value);

            const payload = {
                source: "External", // Correctly set the source
                floor: fromFloor,  // Floor from the dropdown
                direction: direction // "Up" or "Down"
            };

            const response = await fetch('/api/elevatorapi/request-floor', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                console.error(`Failed to enqueue external request: ${response.statusText}`);
            }
        }

        async function handleInternalRequest(targetFloor) {
            const payload = {
                source: "Internal", // Correctly set the source
                floor: targetFloor, // Target floor
                direction: "None"   // Default direction for internal requests
            };

            const response = await fetch('/api/elevatorapi/request-floor', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                console.error(`Failed to enqueue internal request: ${response.statusText}`);
            }
        }

        function updateControls() {
            const fromFloor = parseInt(document.getElementById('fromFloor').value);
            const externalControls = document.getElementById('externalControls');
            const internalControls = document.getElementById('internalControls');

            // Show external or internal controls
            if (!isInside) {
                externalControls.style.display = 'block';
                internalControls.style.display = 'none';

                // Adjust buttons based on selected floor
                if (fromFloor === 1) {
                    externalControls.innerHTML = `<button onclick="handleExternalRequest('Up')">Call Up</button>`;
                } else if (fromFloor === 5) {
                    externalControls.innerHTML = `<button onclick="handleExternalRequest('Down')">Call Down</button>`;
                } else {
                    externalControls.innerHTML = `
                        <button onclick="handleExternalRequest('Up')">Call Up</button>
                        <button onclick="handleExternalRequest('Down')">Call Down</button>
                    `;
                }
            } else {
                externalControls.style.display = 'none';
                internalControls.style.display = 'block';

                // Render floor buttons
                internalControls.innerHTML = [1, 2, 3, 4, 5]
                    .map(floor => `<button onclick="handleInternalRequest(${floor})">Go to Floor ${floor}</button>`)
                    .join('');
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('fromFloor').addEventListener('change', updateControls);
            updateControls();
        });

        setInterval(pollElevatorState, 500); // Poll every 500ms
        setInterval(pollQueueAndHistory, 2000); // Poll every 2 seconds

                async function pollQueueAndHistory() {
            try {
                const queueResponse = await fetch('/api/elevatorapi/queue');
                const queueData = await queueResponse.json();

                const historyResponse = await fetch('/api/elevatorapi/history');
                const historyData = await historyResponse.json();

                // Update current queue
                const queueList = document.getElementById('currentQueue');
                queueList.innerHTML = '';
                queueData.forEach(req => {
                    const li = document.createElement('li');
                    li.textContent = `Floor: ${req.floor}, Source: ${req.source}`;
                    queueList.appendChild(li);
                });

                // Update history log
                const historyList = document.getElementById('historyLog');
                historyList.innerHTML = '';
                historyData.forEach(req => {
                    const li = document.createElement('li');
                    li.textContent = `Floor: ${req.floor}, Source: ${req.source}, Processed At: ${new Date(req.processedAt).toLocaleString()}`;
                    historyList.appendChild(li);
                });
            } catch (error) {
                console.error('Error polling queue and history:', error);
            }
        }
    </script>


    <script type="application/processing" data-processing-target="elevatorSketch">
        // Variables for elevator visualization
        float elevatorY; // Elevator's vertical position
        int totalFloors = 5; // Number of floors
        float floorHeight; // Height of each floor
        String doorState = "Closed"; // Door state
        boolean moving = false; // Elevator movement state

        void setup() {
            size(200, 400); // Canvas size
            floorHeight = height / totalFloors; // Calculate floor height
            elevatorY = height - floorHeight; // Start at ground floor
            smooth();
        }

        void draw() {
            background(240); // Light background

            // Draw elevator shaft
            fill(200);
            rect(50, 0, 100, height);

            // Draw floors
            stroke(180);
            for (int i = 0; i <= totalFloors; i++) {
                line(50, i * floorHeight, 150, i * floorHeight);
            }

            // Draw elevator
            @* fill(moving ? color(0, 255, 0) : color(255, 0, 0)); // Green if moving, red if idle *@
            fill(doorState === "Closed" ? color(255, 0, 0) : color(0, 255, 0)); // Green if moving, red if idle
            rect(55, elevatorY, 90, floorHeight - 2);

            // Display door state
            fill(0);
            textSize(12);
            textAlign(CENTER);
            text("Doors: " + doorState, width / 2, height - 10);
        }

        // Function to update elevator state
        void updateElevator(float position, String state, String doors) {
            elevatorY = height - (position * floorHeight); // Map position to canvas
            moving = state.equals("Moving");
            doorState = doors;
        }
    </script>

</head>
<body>

    <div style="display: flex; justify-content: space-between;">
        <div>
            <!-- Existing UI content -->
            <h1>Elevator Simulator</h1>
            <div>
                <p id="currentFloor">Current Floor: Loading...</p>
                <p id="state">State: Loading...</p>
                <p id="doorState">Door State: Loading...</p>
                <p id="position">Position: Loading...</p>
            </div>

            <h2>Controls</h2>
            <label for="fromFloor">From Floor:</label>
            <select id="fromFloor">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
            </select>

            <div id="externalControls" style="display: none;"></div>
            <div id="internalControls" style="display: none;"></div>

            <h2>Current Queue</h2>
            <ul id="currentQueue">Loading...</ul>

            <h2>History Log</h2>
            <ul id="historyLog">Loading...</ul>
            <!-- Other elements -->
        </div>
        <canvas id="elevatorSketch" style="border: 1px solid #ccc;"></canvas>
    </div>

    
</body>
</html>
