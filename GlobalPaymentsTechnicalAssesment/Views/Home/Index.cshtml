<!DOCTYPE html>
<html>
<head>
    <title>Elevator Simulator</title>
    <script>
        let isInside = false; // Tracks whether the user is inside the elevator

        async function pollElevatorState() {
            const response = await fetch('/api/elevatorapi/state');
            const data = await response.json();

            document.getElementById('currentFloor').innerText = `Current Floor: ${data.currentFloor}`;
            document.getElementById('state').innerText = `State: ${data.state}`;
            document.getElementById('doorState').innerText = `Door State: ${data.doorState}`;
            document.getElementById('position').innerText = `Position: ${data.position.toFixed(2)} meters`;

            // Transition to internal controls when the doors are opened
            if (data.doorState === "Opened" && !isInside) {
                isInside = true;
                updateControls(); // Switch to internal controls
            }
        }

        async function pollQueueAndHistory() {
            const queueResponse = await fetch('/api/elevatorapi/queue');
            const queueData = await queueResponse.json();

            const historyResponse = await fetch('/api/elevatorapi/history');
            const historyData = await historyResponse.json();

            // Update current queue
            const queueList = document.getElementById('currentQueue');
            queueList.innerHTML = '';
            queueData.forEach(req => {
                const li = document.createElement('li');
                li.textContent = `Floor: ${req.floor}, Source: ${req.source}`;
                queueList.appendChild(li);
            });

            // Update history log
            const historyList = document.getElementById('historyLog');
            historyList.innerHTML = '';
            historyData.forEach(req => {
                const li = document.createElement('li');
                li.textContent = `Floor: ${req.floor}, Source: ${req.source}, Processed At: ${new Date(req.processedAt).toLocaleString()}`;
                historyList.appendChild(li);
            });
        }

                async function handleExternalRequest(direction) {
            const fromFloor = parseInt(document.getElementById('fromFloor').value);

            const payload = {
                source: "External", // Correctly set the source
                floor: fromFloor,  // Floor from the dropdown
                direction: direction // "Up" or "Down"
            };

            const response = await fetch('/api/elevatorapi/request-floor', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                console.error(`Failed to enqueue external request: ${response.statusText}`);
            }
        }

                async function handleInternalRequest(targetFloor) {
            const payload = {
                source: "Internal", // Correctly set the source
                floor: targetFloor, // Target floor
                direction: "None"   // Default direction for internal requests
            };

            const response = await fetch('/api/elevatorapi/request-floor', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                console.error(`Failed to enqueue internal request: ${response.statusText}`);
            }
        }


        function updateControls() {
            const fromFloor = parseInt(document.getElementById('fromFloor').value);
            const externalControls = document.getElementById('externalControls');
            const internalControls = document.getElementById('internalControls');

            // Show external or internal controls
            if (!isInside) {
                externalControls.style.display = 'block';
                internalControls.style.display = 'none';

                // Adjust buttons based on selected floor
                if (fromFloor === 1) {
                    externalControls.innerHTML = `<button onclick="handleExternalRequest('Up')">Call Up</button>`;
                } else if (fromFloor === 5) {
                    externalControls.innerHTML = `<button onclick="handleExternalRequest('Down')">Call Down</button>`;
                } else {
                    externalControls.innerHTML = `
                        <button onclick="handleExternalRequest('Up')">Call Up</button>
                        <button onclick="handleExternalRequest('Down')">Call Down</button>
                    `;
                }
            } else {
                externalControls.style.display = 'none';
                internalControls.style.display = 'block';

                // Render floor buttons
                internalControls.innerHTML = [1, 2, 3, 4, 5]
                    .map(floor => `<button onclick="handleInternalRequest(${floor})">Go to Floor ${floor}</button>`)
                    .join('');
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('fromFloor').addEventListener('change', updateControls);
            updateControls();
        });

        setInterval(pollElevatorState, 500); // Poll every 500ms
        setInterval(pollQueueAndHistory, 2000); // Poll every 2 seconds
    </script>

</head>
<body>
    <h1>Elevator Simulator</h1>
    <div>
        <p id="currentFloor">Current Floor: Loading...</p>
        <p id="state">State: Loading...</p>
        <p id="doorState">Door State: Loading...</p>
        <p id="position">Position: Loading...</p>
    </div>

    <h2>Controls</h2>
    <label for="fromFloor">From Floor:</label>
    <select id="fromFloor">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select>

    <div id="externalControls" style="display: none;"></div>
    <div id="internalControls" style="display: none;"></div>

    <h2>Current Queue</h2>
    <ul id="currentQueue">Loading...</ul>

    <h2>History Log</h2>
    <ul id="historyLog">Loading...</ul>
</body>
</html>
